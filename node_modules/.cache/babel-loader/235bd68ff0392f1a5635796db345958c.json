{"ast":null,"code":"var _jsxFileName = \"/home/mohit/react_socket_setup/reactjs_socket_setup/src/Component/Socket.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client'; // first you have to install \"socket.io-client\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket; // you have to define socket \nconst Socket = () => {\n  _s();\n  const CON_PORT = \"\"; // set according to your channel port \n  const [message, setMessage] = useState(\"\");\n  const [messagelist, setMessageList] = useState([]);\n  const [chat, setChat] = useState([]); // for all incoming message \n  // useEffect(() => {\n  //     socket = io(CON_PORT)\n  //     handleJoinRoom()  // join room function\n  // }, [CON_PORT])\n\n  const handleJoinRoom = () => {\n    socket.emit(\"join_room\", {\n      room_id: \"your uniqe id to join room\",\n      req_from: \"Client\"\n    });\n    handleReceiveMessage();\n  };\n  //********************  function for Receive message ****************************************** */\n  const handleReceiveMessage = () => {\n    socket.on(\"receive_message\", function (payload) {\n      // here you can get received messages payload \n      //  console.log(\"chat message\",payload)\n    });\n  };\n  //********************  function for send message ****************************************** */\n  const handleSendMessage = e => {\n    e.preventDefault();\n    socket.emit(\"send_message\", {\n      room_id: \"your room id\",\n      message: message,\n      date_now: new Date()\n    });\n    if (message) {\n      setMessageList(data => [...data, message]);\n      setMessage(\"\");\n    }\n  };\n  // console.log(messagelist);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        color: \"red\"\n      },\n      children: messagelist === null || messagelist === void 0 ? void 0 : messagelist.map(chat => /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: chat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 65\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        handleSendMessage(e);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => {\n          setMessage(e.target.value);\n        },\n        value: message,\n        className: \"chatInput\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"chatbutton\",\n        children: \" Send \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Socket, \"2zbLi/w7RaQ3uPINq9qqrhp/EFg=\");\n_c = Socket;\nexport default Socket;\nvar _c;\n$RefreshReg$(_c, \"Socket\");","map":{"version":3,"names":["React","useState","useEffect","io","socket","Socket","CON_PORT","message","setMessage","messagelist","setMessageList","chat","setChat","handleJoinRoom","emit","room_id","req_from","handleReceiveMessage","on","payload","handleSendMessage","e","preventDefault","date_now","Date","data","color","map","target","value"],"sources":["/home/mohit/react_socket_setup/reactjs_socket_setup/src/Component/Socket.js"],"sourcesContent":["import React, { useState ,useEffect} from 'react'\nimport { io } from 'socket.io-client'; // first you have to install \"socket.io-client\"\nlet socket ; // you have to define socket \nconst Socket = () => {\n\n    const CON_PORT = \"\"; // set according to your channel port \n    const [message, setMessage] = useState(\"\")\n    const [messagelist, setMessageList] = useState([])\n    const [chat , setChat] = useState([]) // for all incoming message \n    // useEffect(() => {\n    //     socket = io(CON_PORT)\n    //     handleJoinRoom()  // join room function\n    // }, [CON_PORT])\n\nconst handleJoinRoom = ()=>{\n    socket.emit(\"join_room\", {\n        room_id: \"your uniqe id to join room\",\n        req_from: \"Client\"\n    }\n    )\n    handleReceiveMessage()\n}\n//********************  function for Receive message ****************************************** */\nconst handleReceiveMessage = ()=>{\n    socket.on(\"receive_message\", function (payload) {\n         // here you can get received messages payload \n        //  console.log(\"chat message\",payload)\n    })\n}\n//********************  function for send message ****************************************** */\nconst handleSendMessage = (e)=>{\n    e.preventDefault()\n    socket.emit(\"send_message\", {\n        room_id: \"your room id\",\n        message: message,\n        date_now: new Date()\n    })\n    if (message) {\n        setMessageList((data) => [...data, message])\n        setMessage(\"\")\n    }\n}\n// console.log(messagelist);\n    return (\n        <div>\n            <h2 style={{color:\"red\"}}>{messagelist?.map((chat)=><ul><li>{chat}</li></ul>)}</h2>\n            <form onSubmit={(e)=>{handleSendMessage(e)}}>\n                <input type=\"text\" onChange={(e)=>{setMessage(e.target.value)}} value={message} className='chatInput' />\n                <button type='submit' className='chatbutton'> Send </button>\n            </form>\n        </div>\n    )\n}\nexport default Socket\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,SAASC,EAAE,QAAQ,kBAAkB,CAAC,CAAC;AAAA;AACvC,IAAIC,MAAM,CAAE,CAAC;AACb,MAAMC,MAAM,GAAG,MAAM;EAAA;EAEjB,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACU,IAAI,EAAGC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,EAAC;EACtC;EACA;EACA;EACA;;EAEJ,MAAMY,cAAc,GAAG,MAAI;IACvBT,MAAM,CAACU,IAAI,CAAC,WAAW,EAAE;MACrBC,OAAO,EAAE,4BAA4B;MACrCC,QAAQ,EAAE;IACd,CAAC,CACA;IACDC,oBAAoB,EAAE;EAC1B,CAAC;EACD;EACA,MAAMA,oBAAoB,GAAG,MAAI;IAC7Bb,MAAM,CAACc,EAAE,CAAC,iBAAiB,EAAE,UAAUC,OAAO,EAAE;MAC3C;MACD;IACJ,CAAC,CAAC;EACN,CAAC;EACD;EACA,MAAMC,iBAAiB,GAAIC,CAAC,IAAG;IAC3BA,CAAC,CAACC,cAAc,EAAE;IAClBlB,MAAM,CAACU,IAAI,CAAC,cAAc,EAAE;MACxBC,OAAO,EAAE,cAAc;MACvBR,OAAO,EAAEA,OAAO;MAChBgB,QAAQ,EAAE,IAAIC,IAAI;IACtB,CAAC,CAAC;IACF,IAAIjB,OAAO,EAAE;MACTG,cAAc,CAAEe,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAElB,OAAO,CAAC,CAAC;MAC5CC,UAAU,CAAC,EAAE,CAAC;IAClB;EACJ,CAAC;EACD;EACI,oBACI;IAAA,wBACI;MAAI,KAAK,EAAE;QAACkB,KAAK,EAAC;MAAK,CAAE;MAAA,UAAEjB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEkB,GAAG,CAAEhB,IAAI,iBAAG;QAAA,uBAAI;UAAA,UAAKA;QAAI;UAAA;UAAA;UAAA;QAAA;MAAM;QAAA;QAAA;QAAA;MAAA,QAAK;IAAC;MAAA;MAAA;MAAA;IAAA,QAAM,eACnF;MAAM,QAAQ,EAAGU,CAAC,IAAG;QAACD,iBAAiB,CAACC,CAAC,CAAC;MAAA,CAAE;MAAA,wBACxC;QAAO,IAAI,EAAC,MAAM;QAAC,QAAQ,EAAGA,CAAC,IAAG;UAACb,UAAU,CAACa,CAAC,CAACO,MAAM,CAACC,KAAK,CAAC;QAAA,CAAE;QAAC,KAAK,EAAEtB,OAAQ;QAAC,SAAS,EAAC;MAAW;QAAA;QAAA;QAAA;MAAA,QAAG,eACxG;QAAQ,IAAI,EAAC,QAAQ;QAAC,SAAS,EAAC,YAAY;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QACzD;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEd,CAAC;AAAA,GAjDKF,MAAM;AAAA,KAANA,MAAM;AAkDZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module"}